--- build a larger database
\i sql/regress_lots_of_points.sql
-- Selected TOC Entries:
--
--\connect - postgres
--
-- TOC Entry ID 2 (OID 2231457)
--
-- Name: tp Type: TABLE Owner: postgres
--
CREATE TABLE "test" (
	"num" integer,
	"the_geom" geometry
);
select sn_create_distributed_table('test', 'num', 'none');
psql:sql/regress_lots_of_points.sql:15: ERROR:  type "public.geometry" does not exist
CONTEXT:  while executing command on localhost:57637
SQL statement "SELECT pg_catalog.create_distributed_table('test','num','hash','none')"
PL/pgSQL function sn_create_distributed_table(regclass,text,text) line 58 at EXECUTE
--
-- Data for TOC Entry ID 4 (OID 2231457)
--
-- Name: test Type: TABLE DATA Owner: postgres
--
COPY "test"  FROM stdin;
--- test some of the searching capabilities
CREATE OR REPLACE FUNCTION qnodes(q text) RETURNS text
LANGUAGE 'plpgsql' AS
$$
DECLARE
  exp TEXT;
  mat TEXT[];
  ret TEXT[];
BEGIN
  FOR exp IN EXECUTE 'EXPLAIN ' || q
  LOOP
    --RAISE NOTICE 'EXP: %', exp;
    mat := regexp_matches(exp, ' *(?:-> *)?(.*Scan)');
    --RAISE NOTICE 'MAT: %', mat;
    IF mat IS NOT NULL THEN
      ret := array_append(ret, mat[1]);
    END IF;
    --RAISE NOTICE 'RET: %', ret;
  END LOOP;
  RETURN array_to_string(ret,',');
END;
$$;
-- GiST index
CREATE INDEX quick_gist on test using gist (the_geom);
set enable_indexscan = off;
set enable_bitmapscan = off;
set enable_seqscan = on;
SELECT 'scan_idx', qnodes('select * from test where the_geom && ST_MakePoint(0,0)');
 ?column? |  qnodes  
----------+----------
 scan_idx | Seq Scan
(1 row)

 select num,ST_astext(the_geom) from test where the_geom && 'BOX3D(125 125,135 135)'::box3d order by num;
 num  |          st_astext           
------+------------------------------
 2594 | POINT(130.504303 126.53112)
 3618 | POINT(130.447205 131.655289)
 7245 | POINT(128.10466 130.94133)
(3 rows)

set enable_indexscan = on;
set enable_bitmapscan = off;
set enable_seqscan = off;
SELECT 'scan_seq', qnodes('select * from test where the_geom && ST_MakePoint(0,0)');
 ?column? |   qnodes   
----------+------------
 scan_seq | Index Scan
(1 row)

 select num,ST_astext(the_geom) from test where the_geom && 'BOX3D(125 125,135 135)'::box3d order by num;
 num  |          st_astext           
------+------------------------------
 2594 | POINT(130.504303 126.53112)
 3618 | POINT(130.447205 131.655289)
 7245 | POINT(128.10466 130.94133)
(3 rows)

CREATE FUNCTION estimate_error(qry text, tol int)
RETURNS text
LANGUAGE 'plpgsql' VOLATILE AS $$
DECLARE
  anl TEXT; -- analisys
  err INT; -- absolute difference between planned and actual rows
  est INT; -- estimated count
  act INT; -- actual count
  mat TEXT[];
BEGIN
  EXECUTE 'EXPLAIN ANALYZE ' || qry INTO anl;

  SELECT regexp_matches(anl, ' rows=([0-9]*) .* rows=([0-9]*) ')
  INTO mat;

  est := mat[1];
  act := mat[2];

  err = abs(est-act);

  RETURN act || '+=' || tol || ':' || coalesce(
    nullif((err < tol)::text,'false'),
    'false:'||err::text
    );

END;
$$;
-- There are 50000 points in the table with full extent being
-- BOX(0.0439142361 0.0197799355,999.955261 999.993652)
CREATE TABLE sample_queries AS
SELECT 1 as id, 5 as tol, 'ST_MakeEnvelope(125,125,135,135)' as box
 UNION ALL
SELECT 2, 60, 'ST_MakeEnvelope(0,0,135,135)'
 UNION ALL
SELECT 3, 500, 'ST_MakeEnvelope(0,0,500,500)'
 UNION ALL
SELECT 4, 600, 'ST_MakeEnvelope(0,0,1000,1000)'
;
select sn_create_distributed_table('sample_queries', 'id', 'none');
NOTICE:  Copying data from local table...
CONTEXT:  SQL statement "SELECT pg_catalog.create_distributed_table('sample_queries','id','hash','none')"
PL/pgSQL function sn_create_distributed_table(regclass,text,text) line 58 at EXECUTE
 sn_create_distributed_table 
-----------------------------
 
(1 row)

-- We raise the statistics target to the limit
ALTER TABLE test ALTER COLUMN the_geom SET STATISTICS 10000;
ANALYZE test;
-- SELECT estimate_error(
--   'select num from test where the_geom && ' || box, tol )
--   FROM sample_queries ORDER BY id;
-- Test selectivity estimation of functional indexes
CREATE INDEX expressional_gist on test using gist ( st_centroid(the_geom) );
ANALYZE test;
-- SELECT 'expr', estimate_error(
--   'select num from test where st_centroid(the_geom) && ' || box, tol )
--   FROM sample_queries ORDER BY id;
DROP TABLE test;
DROP TABLE sample_queries;
DROP FUNCTION estimate_error(text, int);
DROP FUNCTION qnodes(text);
set enable_indexscan = on;
set enable_bitmapscan = on;
set enable_seqscan = on;
